#include "imports/stdlib.fc";

;; TON TON Token Wallet Contract
;; Implements 2% transaction fee with buyback mechanism

;; Constants
const int min_tons_for_storage = 30000000; ;; 0.03 TON
const int gas_consumption = 15000000; ;; 0.015 TON
const int transaction_fee_percent = 2; ;; 2% fee
const int buyback_threshold = 10000000000000; ;; 10,000 TON in nanotons

;; Operations
const int op::transfer = 0xf8a7ea5;
const int op::transfer_notification = 0x7362d09c;
const int op::internal_transfer = 0x178d4519;
const int op::excesses = 0xd53276db;
const int op::burn = 0x595f07bc;
const int op::burn_notification = 0x7bdd97de;

;; Error codes
const int error::not_enough_jettons = 706;
const int error::not_enough_tons = 707;
const int error::not_valid_wallet = 708;
const int error::wrong_workchain = 709;
const int error::balance_error = 47;

;; Storage layout
;; balance:Coins owner_address:MsgAddressInt jetton_master_address:MsgAddressInt jetton_wallet_code:^Cell

() load_data() impure inline {
  slice ds = get_data().begin_parse();
  return (
    ds~load_coins(), ;; balance
    ds~load_msg_addr(), ;; owner_address
    ds~load_msg_addr(), ;; jetton_master_address
    ds~load_ref() ;; jetton_wallet_code
  );
}

() save_data(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) impure inline {
  set_data(begin_cell()
    .store_coins(balance)
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
    .store_ref(jetton_wallet_code)
    .end_cell());
}

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) {
  return begin_cell()
    .store_uint(0, 2)
    .store_dict(jetton_wallet_code)
    .store_dict(begin_cell().store_slice(owner_address).store_slice(jetton_master_address).end_cell())
    .store_uint(0, 1)
    .end_cell();
}

slice calculate_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) {
  return begin_cell()
    .store_uint(4, 3)
    .store_int(0, 8)
    .store_uint(cell_hash(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code)), 256)
    .end_cell()
    .begin_parse();
}

;; Calculate transaction fee
(int, int, int) calculate_fee(int amount) {
  int fee = (amount * transaction_fee_percent) / 100;
  int after_fee_amount = amount - fee;
  int buyback_amount = fee / 2; ;; 50% for buyback
  int treasury_amount = fee - buyback_amount; ;; 50% for treasury
  return (after_fee_amount, buyback_amount, treasury_amount);
}

;; Process buyback and burn
() process_buyback(int buyback_amount, slice jetton_master_address, int query_id) impure {
  if (buyback_amount >= buyback_threshold) {
    ;; Send burn notification to master contract
    var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(jetton_master_address)
      .store_coins(gas_consumption)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op::internal_transfer, 32)
      .store_uint(query_id, 64)
      .store_coins(buyback_amount)
      .store_slice(my_address()) ;; from_address (this wallet)
      .store_slice(jetton_master_address) ;; response_address
      .store_coins(0) ;; forward_ton_amount
      .store_int(0, 1); ;; forward_payload empty
    send_raw_message(msg.end_cell(), 1);
  }
}

() send_jettons(slice to_owner_address, int jetton_amount, int ton_amount, slice response_address, int query_id, int forward_ton_amount, slice forward_payload, cell jetton_wallet_code, slice jetton_master_address) impure {
  cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
  slice to_wallet_address = calculate_jetton_wallet_address(to_owner_address, jetton_master_address, jetton_wallet_code);
  
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(ton_amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init);

  var msg_body = begin_cell()
    .store_uint(op::internal_transfer, 32)
    .store_uint(query_id, 64)
    .store_coins(jetton_amount)
    .store_slice(my_address()) ;; from_address
    .store_slice(response_address)
    .store_coins(forward_ton_amount)
    .store_slice(forward_payload);

  msg = msg.store_ref(msg_body.end_cell());
  send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return (); ;; ignore empty messages
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return (); ;; ignore all bounced messages
  }
  slice sender_address = cs~load_msg_addr();

  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  if (op == op::transfer) {
    throw_unless(error::not_enough_tons, msg_value > gas_consumption + min_tons_for_storage);
    throw_unless(error::not_valid_wallet, equal_slices(sender_address, owner_address));

    int jetton_amount = in_msg_body~load_coins();
    slice to_owner_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    throw_unless(error::not_enough_jettons, balance >= jetton_amount);
    throw_unless(error::not_enough_jettons, jetton_amount > 0);

    int forward_ton_amount = in_msg_body~load_coins();
    slice forward_payload = in_msg_body;

    ;; Calculate fees
    (int after_fee_amount, int buyback_amount, int treasury_amount) = calculate_fee(jetton_amount);

    ;; Update balance
    balance -= jetton_amount;
    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);

    ;; Process buyback if threshold is met
    if (buyback_amount > 0) {
      process_buyback(buyback_amount, jetton_master_address, query_id);
    }

    ;; Send treasury amount to master contract (or designated treasury address)
    if (treasury_amount > 0) {
      ;; For now, we'll burn treasury amount too. In production, send to treasury wallet
      process_buyback(treasury_amount, jetton_master_address, query_id);
    }

    ;; Send the after-fee amount to recipient
    int ton_balance_before_msg = my_balance - msg_value;
    int storage_fee = min_tons_for_storage - min(ton_balance_before_msg, min_tons_for_storage);
    send_jettons(to_owner_address, after_fee_amount, msg_value - gas_consumption + storage_fee, response_address, query_id, forward_ton_amount, forward_payload, jetton_wallet_code, jetton_master_address);
    return ();
  }

  if (op == op::internal_transfer) {
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    int forward_ton_amount = in_msg_body~load_coins();
    slice forward_payload = in_msg_body;

    ;; Verify sender
    slice expected_from_wallet = calculate_jetton_wallet_address(from_address, jetton_master_address, jetton_wallet_code);
    int valid_sender = equal_slices(sender_address, jetton_master_address) | equal_slices(sender_address, expected_from_wallet);
    throw_unless(error::not_valid_wallet, valid_sender);

    balance += jetton_amount;
    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);

    ;; Send notification to owner if forward amount is provided
    if (forward_ton_amount > 0) {
      var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(owner_address)
        .store_coins(forward_ton_amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::transfer_notification, 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(from_address)
        .store_slice(forward_payload);
      send_raw_message(msg.end_cell(), 1);
    }

    ;; Send excesses
    if ((response_address.preload_uint(2) != 0) & (msg_value > forward_ton_amount + gas_consumption)) {
      var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(response_address)
        .store_coins(msg_value - forward_ton_amount - gas_consumption)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::excesses, 32)
        .store_uint(query_id, 64);
      send_raw_message(msg.end_cell(), 2);
    }
    return ();
  }

  if (op == op::burn) {
    throw_unless(error::not_valid_wallet, equal_slices(sender_address, owner_address));
    int jetton_amount = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();
    
    throw_unless(error::not_enough_jettons, balance >= jetton_amount);
    throw_unless(error::not_enough_jettons, jetton_amount > 0);

    balance -= jetton_amount;
    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);

    ;; Send burn notification to owner
    var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(response_address)
      .store_coins(msg_value - gas_consumption)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op::burn_notification, 32)
      .store_uint(query_id, 64)
      .store_coins(jetton_amount)
      .store_slice(owner_address);
    send_raw_message(msg.end_cell(), 2);

    ;; Notify master about burn
    var master_msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(jetton_master_address)
      .store_coins(gas_consumption)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op::internal_transfer, 32)
      .store_uint(query_id, 64)
      .store_coins(jetton_amount)
      .store_slice(owner_address)
      .store_slice(response_address)
      .store_coins(0)
      .store_int(0, 1);
    send_raw_message(master_msg.end_cell(), 1);
    return ();
  }

  throw(0xffff); ;; unknown operation
}

;; Get methods

(int, slice, slice, cell) get_wallet_data() method_id {
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  return (balance, owner_address, jetton_master_address, jetton_wallet_code);
}