#include "imports/stdlib.fc";

;; TON TON Token Contract (Minter)
;; Symbol: TTKN
;; Decimals: 9
;; Total Supply: 2,100,000,000
;; Transaction Fee: 2% (handled in wallet)

;; Constants
const int min_tons_for_storage = 50000000; ;; 0.05 TON
const int gas_consumption = 15000000; ;; 0.015 TON

;; Operations
const int op::mint = 21;
const int op::change_admin = 3;
const int op::change_content = 4;
const int op::internal_transfer = 0x178d4519;
const int op::transfer_notification = 0x7362d09c;

;; Error codes
const int error::not_admin = 73;
const int error::not_mintable = 74;
const int error::insufficient_gas = 75;
const int error::discovery_fee_not_matched = 76;

;; Storage layout
;; total_supply:Coins mintable:Bool admin_address:MsgAddressInt jetton_content:^Cell jetton_wallet_code:^Cell

() load_data() impure inline {
  slice ds = get_data().begin_parse();
  return (
    ds~load_coins(), ;; total_supply
    ds~load_int(1),  ;; mintable?
    ds~load_msg_addr(), ;; admin_address
    ds~load_ref(), ;; jetton_content
    ds~load_ref()  ;; jetton_wallet_code
  );
}

() save_data(int total_supply, int mintable, slice admin_address, cell jetton_content, cell jetton_wallet_code) impure inline {
  set_data(begin_cell()
    .store_coins(total_supply)
    .store_int(mintable, 1)
    .store_slice(admin_address)
    .store_ref(jetton_content)
    .store_ref(jetton_wallet_code)
    .end_cell());
}

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_minter_address, cell jetton_wallet_code) {
  return begin_cell()
    .store_uint(0, 2)
    .store_dict(jetton_wallet_code)
    .store_dict(begin_cell().store_slice(owner_address).store_slice(jetton_minter_address).end_cell())
    .store_uint(0, 1)
    .end_cell();
}

slice calculate_jetton_wallet_address(slice owner_address, slice jetton_minter_address, cell jetton_wallet_code) {
  return begin_cell()
    .store_uint(4, 3)
    .store_int(0, 8)
    .store_uint(cell_hash(calculate_jetton_wallet_state_init(owner_address, jetton_minter_address, jetton_wallet_code)), 256)
    .end_cell()
    .begin_parse();
}

() mint_tokens(slice to_address, slice from_address, int jetton_amount, cell master_msg) impure {
  (int total_supply, int mintable, slice admin_address, cell jetton_content, cell jetton_wallet_code) = load_data();
  throw_unless(error::not_mintable, mintable);

  cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
  slice to_wallet_address = calculate_jetton_wallet_address(to_address, my_address(), jetton_wallet_code);
  
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(min_tons_for_storage)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);
  send_raw_message(msg.end_cell(), 1);

  save_data(total_supply + jetton_amount, mintable, admin_address, jetton_content, jetton_wallet_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return (); ;; ignore empty messages
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return (); ;; ignore all bounced messages
  }
  slice sender_address = cs~load_msg_addr();

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  (int total_supply, int mintable, slice admin_address, cell jetton_content, cell jetton_wallet_code) = load_data();

  if (op == op::mint) {
    throw_unless(error::not_admin, equal_slices(sender_address, admin_address));
    slice to_address = in_msg_body~load_msg_addr();
    int jetton_amount = in_msg_body~load_coins();
    cell master_msg = begin_cell()
      .store_uint(op::internal_transfer, 32)
      .store_uint(query_id, 64)
      .store_coins(jetton_amount)
      .store_slice(my_address()) ;; from_address = minter
      .store_slice(sender_address) ;; response_address = admin
      .store_coins(0) ;; forward_ton_amount
      .store_int(0, 1) ;; forward_payload in this slice
      .end_cell();

    mint_tokens(to_address, sender_address, jetton_amount, master_msg);
    return ();
  }

  if (op == op::change_admin) {
    throw_unless(error::not_admin, equal_slices(sender_address, admin_address));
    slice new_admin_address = in_msg_body~load_msg_addr();
    save_data(total_supply, mintable, new_admin_address, jetton_content, jetton_wallet_code);
    return ();
  }

  if (op == op::change_content) {
    throw_unless(error::not_admin, equal_slices(sender_address, admin_address));
    cell new_content = in_msg_body~load_ref();
    save_data(total_supply, mintable, admin_address, new_content, jetton_wallet_code);
    return ();
  }

  if (op == op::internal_transfer) {
    ;; This is a burn notification from wallet
    int jetton_amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();
    
    ;; Verify sender is correct wallet
    slice expected_wallet = calculate_jetton_wallet_address(from_address, my_address(), jetton_wallet_code);
    throw_unless(76, equal_slices(sender_address, expected_wallet));
    
    ;; Update total supply (burn)
    save_data(total_supply - jetton_amount, mintable, admin_address, jetton_content, jetton_wallet_code);
    return ();
  }

  throw(0xffff); ;; unknown operation
}

;; Get methods

(int, int, slice, cell, cell) get_jetton_data() method_id {
  (int total_supply, int mintable, slice admin_address, cell jetton_content, cell jetton_wallet_code) = load_data();
  return (total_supply, mintable, admin_address, jetton_content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
  (int total_supply, int mintable, slice admin_address, cell jetton_content, cell jetton_wallet_code) = load_data();
  return calculate_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}